// Copyright (c) 2010-16 Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

#include <gtest/gtest.h>

#include "Math/Catmull-Rom.h"

namespace cr = rainbow::catmull_rom;

TEST(CatmullRomTest, HandlesZeros)
{
    constexpr Vec2f points[4];

    for (int i = 0; i < 10; ++i)
    {
        ASSERT_EQ(Vec2f::Zero, cr::solve(points, i * 0.1f));
        ASSERT_EQ(Vec2f::Zero, cr::derivative(points, i * 0.1f));
    }
}

TEST(CatmullRomTest, HitsControlPoints)
{
    constexpr Vec2f points[]{{0, 0}, {1, 1}, {2, 1}, {3, 0}, {4, 0}};

    ASSERT_EQ(points[1], cr::solve(points, 0.0f));
    ASSERT_EQ(points[2], cr::solve(points, 0.5f));
    ASSERT_EQ(points[3], cr::solve(points, 1.0f));
}

TEST(CatmullRomTest, CentripetalParameterization)
{
    constexpr Vec2f points1[]{{0, 0}, {1, 1}, {1.1, 1}, {2, 0}};
    constexpr Vec2f data1[]{
        {1.00000000e+00f, 1.00000000e+00f}, {1.01254270e+00f, 1.00505010e+00f},
        {1.02346445e+00f, 1.00901874e+00f}, {1.03316122e+00f, 1.01189061e+00f},
        {1.04202896e+00f, 1.01365044e+00f}, {1.05046365e+00f, 1.01428292e+00f},
        {1.05886125e+00f, 1.01377277e+00f}, {1.06761772e+00f, 1.01210469e+00f},
        {1.07712903e+00f, 1.00926340e+00f}, {1.08779114e+00f, 1.00523360e+00f},
        {1.10000003e+00f, 9.99999998e-01f}};

    constexpr int size1 = static_cast<int>(rainbow::array_size(data1));
    constexpr float inc1 = 1.0f / (size1 - 1);
    for (int i = 0; i < size1; ++i)
    {
        const auto p = cr::solve(points1, i * inc1);

        SCOPED_TRACE(i);
        ASSERT_FLOAT_EQ(data1[i].x, p.x);
        ASSERT_FLOAT_EQ(data1[i].y, p.y);
    }

    constexpr Vec2f points2[]{
        {0, 64}, {1, 0}, {2, 64}, {3, 0}, {4, 64}, {5, 0}, {6, 64}};

    constexpr Vec2f data2[]{
        {1.00000000e+00f, 0.00000000e+00f}, {1.03999996e+00f, 2.99007982e-01f},
        {1.08000004e+00f, 1.16326392e+00f}, {1.12000000e+00f, 2.54361606e+00f},
        {1.15999997e+00f, 4.39091158e+00f}, {1.20000005e+00f, 6.65599966e+00f},
        {1.24000001e+00f, 9.28972816e+00f}, {1.27999997e+00f, 1.22429447e+01f},
        {1.31999993e+00f, 1.54664955e+01f}, {1.36000001e+00f, 1.89112301e+01f},
        {1.39999998e+00f, 2.25279999e+01f}, {1.44000006e+00f, 2.62676468e+01f},
        {1.48000002e+00f, 3.00810261e+01f}, {1.51999998e+00f, 3.39189758e+01f},
        {1.55999994e+00f, 3.77323532e+01f}, {1.59999990e+00f, 4.14720001e+01f},
        {1.63999999e+00f, 4.50887642e+01f}, {1.68000007e+00f, 4.85335083e+01f},
        {1.72000003e+00f, 5.17570534e+01f}, {1.75999999e+00f, 5.47102737e+01f},
        {1.79999995e+00f, 5.73440018e+01f}, {1.83999991e+00f, 5.96090851e+01f},
        {1.88000000e+00f, 6.14563828e+01f}, {1.91999996e+00f, 6.28367386e+01f},
        {1.96000004e+00f, 6.37010040e+01f}, {2.00000000e+00f, 6.40000000e+01f},
        {2.03999996e+00f, 6.37009926e+01f}, {2.07999992e+00f, 6.28367386e+01f},
        {2.11999989e+00f, 6.14563828e+01f}, {2.15999985e+00f, 5.96090889e+01f},
        {2.19999981e+00f, 5.73440056e+01f}, {2.24000001e+00f, 5.47102737e+01f},
        {2.27999997e+00f, 5.17570572e+01f}, {2.31999993e+00f, 4.85335083e+01f},
        {2.36000013e+00f, 4.50887680e+01f}, {2.40000010e+00f, 4.14720001e+01f},
        {2.44000006e+00f, 3.77323608e+01f}, {2.48000002e+00f, 3.39189758e+01f},
        {2.51999998e+00f, 3.00810242e+01f}, {2.55999994e+00f, 2.62676544e+01f},
        {2.59999990e+00f, 2.25280075e+01f}, {2.63999987e+00f, 1.89112358e+01f},
        {2.67999983e+00f, 1.54665031e+01f}, {2.71999979e+00f, 1.22429543e+01f},
        {2.75999999e+00f, 9.28972626e+00f}, {2.79999995e+00f, 6.65599823e+00f},
        {2.83999991e+00f, 4.39091492e+00f}, {2.88000011e+00f, 2.54361725e+00f},
        {2.92000008e+00f, 1.16326141e+00f}, {2.96000004e+00f, 2.99011230e-01f},
        {3.00000000e+00f, 0.00000000e+00f}, {3.03999996e+00f, 2.99007446e-01f},
        {3.07999992e+00f, 1.16326189e+00f}, {3.11999989e+00f, 2.54361153e+00f},
        {3.15999985e+00f, 4.39090443e+00f}, {3.20000005e+00f, 6.65600252e+00f},
        {3.24000001e+00f, 9.28972816e+00f}, {3.27999997e+00f, 1.22429419e+01f},
        {3.31999993e+00f, 1.54664917e+01f}, {3.35999990e+00f, 1.89112244e+01f},
        {3.39999986e+00f, 2.25279865e+01f}, {3.44000006e+00f, 2.62676506e+01f},
        {3.48000002e+00f, 3.00810242e+01f}, {3.51999998e+00f, 3.39189758e+01f},
        {3.55999994e+00f, 3.77323456e+01f}, {3.59999990e+00f, 4.14719925e+01f},
        {3.63999987e+00f, 4.50887604e+01f}, {3.67999983e+00f, 4.85334969e+01f},
        {3.72000003e+00f, 5.17570610e+01f}, {3.75999999e+00f, 5.47102737e+01f},
        {3.79999995e+00f, 5.73440018e+01f}, {3.83999991e+00f, 5.96090851e+01f},
        {3.87999988e+00f, 6.14563751e+01f}, {3.91999984e+00f, 6.28367310e+01f},
        {3.96000004e+00f, 6.37009888e+01f}, {4.00000000e+00f, 6.40000000e+01f},
        {4.03999996e+00f, 6.37009926e+01f}, {4.07999992e+00f, 6.28367386e+01f},
        {4.11999989e+00f, 6.14563904e+01f}, {4.15999985e+00f, 5.96090965e+01f},
        {4.19999981e+00f, 5.73440094e+01f}, {4.23999977e+00f, 5.47102737e+01f},
        {4.27999973e+00f, 5.17570572e+01f}, {4.31999969e+00f, 4.85335083e+01f},
        {4.35999966e+00f, 4.50887756e+01f}, {4.39999962e+00f, 4.14720154e+01f},
        {4.43999958e+00f, 3.77323685e+01f}, {4.48000002e+00f, 3.39189758e+01f},
        {4.51999998e+00f, 3.00810242e+01f}, {4.55999994e+00f, 2.62676544e+01f},
        {4.59999990e+00f, 2.25280075e+01f}, {4.63999987e+00f, 1.89112396e+01f},
        {4.67999983e+00f, 1.54665031e+01f}, {4.72000027e+00f, 1.22429390e+01f},
        {4.76000023e+00f, 9.28972626e+00f}, {4.80000019e+00f, 6.65599823e+00f},
        {4.84000015e+00f, 4.39091492e+00f}, {4.88000011e+00f, 2.54362488e+00f},
        {4.92000008e+00f, 1.16326904e+00f}, {4.96000004e+00f, 2.99011230e-01f}};

    constexpr int size2 = static_cast<int>(rainbow::array_size(data2));
    constexpr float inc2 = 1.0f / size2;
    for (int i = 0; i < size2; ++i)
    {
        const auto p = cr::solve(points2, i * inc2);

        ASSERT_FLOAT_EQ(data2[i].x, p.x);
        ASSERT_FLOAT_EQ(data2[i].y, p.y);
    }
}
