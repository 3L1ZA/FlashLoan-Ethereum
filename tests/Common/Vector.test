#include "Common/Vector.h"

class VectorTest : public testing::Test
{
protected:
	const unsigned int test_capacity;
	const unsigned int test_size;
	Vector<unsigned int> intvec;

	VectorTest() : test_capacity(16384), test_size(10000)
	{
		// Initialise vector with some content
		for (unsigned int i = 0; i < this->test_size; ++i)
			this->intvec.push_back(i);
	}
};

TEST_F(VectorTest, PushBackAndExpansion)
{
	ASSERT_EQ(test_capacity, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, At)
{
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec.at(i));
}

TEST_F(VectorTest, Begin)
{
	ASSERT_EQ(&intvec[0], intvec.begin());
}

TEST_F(VectorTest, OperatorEq)
{
	Vector<unsigned int> cpvec;
	cpvec = intvec;
	ASSERT_EQ(test_capacity, cpvec.capacity());
	ASSERT_EQ(test_size, cpvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, cpvec[i]);
}

TEST_F(VectorTest, CopyConstructor)
{
	Vector<unsigned int> cpvec(intvec);
	ASSERT_EQ(test_capacity, cpvec.capacity());
	ASSERT_EQ(test_size, cpvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, cpvec[i]);
}

TEST_F(VectorTest, ReserveLessThanSize)
{
	intvec.reserve(0);
	ASSERT_EQ(test_size, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, ReserveGreaterThanSize)
{
	const unsigned int double_capacity = test_capacity << 1;
	intvec.reserve(double_capacity);
	ASSERT_EQ(double_capacity, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, Assignment)
{
	for (unsigned int i = 0; i < test_size; ++i)
		intvec[i] = i * 5;
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i * 5, intvec[i]);
}
