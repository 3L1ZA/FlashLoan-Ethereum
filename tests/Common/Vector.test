#include "Common/Vector.h"

class VectorTest : public testing::Test
{
protected:
	const unsigned int test_capacity;
	const unsigned int test_size;
	Vector<unsigned int> intvec;

	VectorTest() : test_capacity(16384), test_size(10000)
	{
		// Initialise vector with some content
		for (unsigned int i = 0; i < this->test_size; ++i)
			this->intvec.push_back(i);
	}
};

TEST_F(VectorTest, Access)
{
	for (unsigned int i = 0; i < test_size; ++i)
	{
		ASSERT_EQ(i, intvec.at(i));
		ASSERT_EQ(i, intvec[i]);
	}
}

TEST_F(VectorTest, Begin)
{
	ASSERT_EQ(&intvec[0], intvec.begin());
}

TEST_F(VectorTest, PushBackPastCapacity)
{
	ASSERT_EQ(test_capacity, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, QuickRemoveFirstElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	const unsigned int last = intvec[intvec.size() - 1];
	intvec.qremove(0);
	ASSERT_EQ(last, intvec[0]);

	for (unsigned int i = 1; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, QuickRemoveLastElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	const unsigned int last = intvec[intvec.size() - 1];
	intvec.qremove(last);

	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, QuickRemoveMiddleElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	const unsigned int height = 2469;
	const unsigned int last = intvec[intvec.size() - 1];
	intvec.qremove(height);

	for (unsigned int i = 0; i < height; ++i)
		ASSERT_EQ(i, intvec[i]);
	ASSERT_EQ(last, intvec[height]);
	for (unsigned int i = height + 1; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, RemoveFirstElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	intvec.remove(0);

	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i + 1, intvec[i]);
}

TEST_F(VectorTest, RemoveLastElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	intvec.remove(intvec.size() - 1);

	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, RemoveMiddleElement)
{
	for (unsigned int i = 0; i < intvec.size(); ++i)
		ASSERT_EQ(i, intvec[i]);

	const size_t fifth = 5;
	intvec.remove(fifth);

	for (unsigned int i = 0; i < intvec.size(); ++i)
	{
		if (i >= fifth)
			ASSERT_EQ(i + 1, intvec[i]);
		else
			ASSERT_EQ(i, intvec[i]);
	}
}

TEST_F(VectorTest, ReserveLessThanSize)
{
	intvec.reserve(0);
	ASSERT_EQ(test_size, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(i, intvec[i]);
}

TEST_F(VectorTest, ReserveGreaterThanSize)
{
	const unsigned int cap = test_capacity + 10;
	intvec.reserve(cap);
	ASSERT_EQ(cap, intvec.capacity());
	ASSERT_EQ(test_size, intvec.size());
	for (unsigned int i = test_size; i < cap; ++i)
		intvec.push_back(i);
	ASSERT_EQ(cap, intvec.capacity());
	ASSERT_EQ(cap, intvec.size());
}

TEST_F(VectorTest, Assignment)
{
	for (unsigned int i = 0; i < test_size; ++i)
		intvec[i] = 0xdeadbeef;
	for (unsigned int i = 0; i < test_size; ++i)
		ASSERT_EQ(0xdeadbeef, intvec[i]);
}
