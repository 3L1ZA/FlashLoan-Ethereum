#include "../../src/Common/List.h"

class ListTest : public testing::Test
{
protected:
	const unsigned int test_size;
	List<int> intlist;

	ListTest() : test_size(10000)
	{
		// Initialise list with some content
		for (int i = 0; i < this->test_size; ++i)
			this->intlist.push_back(i);
	}
};

TEST_F(ListTest, IteratorIncrementAndDecrement)
{
	ASSERT_EQ(test_size, intlist.size());

	int count = 0;
	List<int>::Iterator i = intlist.begin();

	while (count < test_size - 1)
	{
		ASSERT_EQ(count++, *i);
		++i;
	}
	ASSERT_EQ(count, *i);
	while (count > 0)
	{
		ASSERT_EQ(count--, *i);
		--i;
	}
	ASSERT_EQ(count, *i);
}

TEST_F(ListTest, Remove)
{
	const unsigned int over = 9000;
	intlist.remove(over);
	ASSERT_EQ(test_size - 1, intlist.size());

	List<int>::Iterator iter = intlist.begin();
	for (unsigned int i = 0; i < over; ++i)
	{
		ASSERT_EQ(i, *iter);
		++iter;
	}
	for (unsigned int i = over + 1; i < (test_size - 1); ++i)
	{
		ASSERT_EQ(i, *iter);
		++iter;
	}
}
